{% macro printCallRealMethodArgs method %}{#
    #}{% for param in method.parameters %}{#
        #}{{ param.argumentLabel }}{#
        #}{% if param.argumentLabel.length > 0 %}:{% endif %}{#
        #} args![{{forloop.counter0}}]{#
        #} as{% if param.isOptional %}?{% else %}!{% endif %}{#
        #} {{ param.typeName.unwrappedTypeName }}{#
        #}{% if not forloop.last %}, {% endif %}{#
    #}{% endfor %}{#
#}{% endmacro %}

{% macro printCallRealMethod method %}{#
    #}{{ method.callName }}({% call printCallRealMethodArgs method %}){#
#}{% endmacro %}

{% macro generateMockProtocol type %}
class Mock{{ type.name }}: {{ type.name }}, Mock {
    
    lazy var mockManager: MockManager = MockManager(self, callRealFuncClosure: { [weak self] (funcName, args) -> Any? in
        guard let __self = self else { return nil }
        return nil
    })
    
    //MARK: - Mock{{ type.name }}
    {% for method in type.allMethods|!definedInExtension|!annotated:"mirageSkip" %}
        {% if not method.isInitializer and not method.isDeinitializer and not method.accessLevel == "fileprivate" %}
            {% call generateMockMethod method %}

        {% endif %}
    {% endfor %}    
}
{% endmacro %}

{% macro generateMockClass type %}
class Mock{{ type.name }}: {{ type.name }}, Mock {
    
    lazy var mockManager: MockManager = MockManager(self, callRealFuncClosure: { [weak self] (funcName, args) -> Any? in
        guard let __self = self else { return nil }
        return __self.callRealFunc(funcName, args)
    })
    fileprivate func callRealFunc(_ funcName:String, _ args:[Any?]?) -> Any? {
        switch funcName {
        {% for method in type.allMethods|!definedInExtension|!annotated:"mirageSkip" %}
            {% if not method.isInitializer and not method.isDeinitializer and not method.accessLevel == "fileprivate" %}
                {% set methodSel %}{% call getMethodSel method %}{% endset %}
        case {{ methodSel }}:
            return {% if method.throws %}try? {% endif %}super.{% call printCallRealMethod method %}
            {% endif %}
        {% endfor %}
        default:
            return nil
        }
    }
    
    //MARK: - Mock{{ type.name }}
    {% for method in type.allMethods|!definedInExtension|!annotated:"mirageSkip" %}
        {% if not method.isInitializer and not method.isDeinitializer and not method.accessLevel == "fileprivate" %}
            {% call generateMockMethod method %}

        {% endif %}
    {% endfor %}    
}
{% endmacro %}

{% macro generateMockType type %}
{% if type.kind == "class" %}
    {% call generateMockClass type %}
{% else %}
    {% call generateMockProtocol type %}
{% endif %}
{% endmacro %}
