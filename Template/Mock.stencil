{% macro params_values method %}{% if method.parameters.count > 0 %}{% for param in method.parameters %} {{ param.name }}{% if not forloop.last %},{% endif %}{% endfor %}{% else %} nil{% endif %}{% endmacro %}

{% macro params_call method %}{% for param in method.parameters %}{{ param.argumentLabel }}: args![{{forloop.counter0}}] as! {{ param.typeName }}{% if not forloop.last %}, {% endif %}{% endfor %}{% endmacro %}


{% macro any_call_general type %}any{{ type }}(){% endmacro %}

{% macro any_call_array type %}{% if argument.returnEmptyArray %}[]{% else %}any{{ type|replace:"[",""|replace:"]","" }}Array(){% endif %}{% endmacro %}

{% macro any_call_dict type %}{% if argument.returnEmptyDict %}[:]{% else %}any{{ type|replace:"[",""|replace:"]",""|replace:":",""|replace:" ","" }}Dict(){% endif %}{% endmacro %}

{% macro any_call type %}{% if type|contains:":" %}{% call any_call_dict type %}{% else %}{% if type|contains:"[" %}{% call any_call_array type %}{% else %}{% call any_call_general type %}{% endif %}{% endif %}{% endmacro %}


{% macro print_override method %}{% if method.definedInType.kind == "class" %}override {% endif %}{% endmacro %}

{% macro generate type %}
// sourcery:file:Mock{{ type.name }}
import Foundation
import XCTest
import Mirage

@testable import {{ argument.testableModule }}
{{ argument.imports }}

class Mock{{ type.name }}: {{ type.name }}, Mock {
    
    lazy var mockManager: MockManager = MockManager(self, callRealFuncClosure: { [weak self] (funcName, args) -> Any? in
        guard let __self = self else { return nil }
    {% if type.kind == "class" %}
        return __self.callRealFunc(funcName, args)
    })
    fileprivate func callRealFunc(_ funcName:String, _ args:[Any?]?) -> Any? {
        switch funcName {
        {% for method in type.allMethods %} 
        {% if method|!annotated:"mirageSkip" %}
        {% if method.definedInType.kind != "extension" %}
        case sel_{{ method.callName }}:
            return super.{{ method.callName }}({% call params_call method %})
        {% endif %}
        {% endif %}
        {% endfor %}
        default:
            return nil
        }
    }
    {% else %}
        return nil
    })
    {% endif%}
    
    //MARK: - Mock{{ type.name }}

    {% for method in type.allMethods %}   
    {% if method|!annotated:"mirageSkip" %} 
    {% if method.definedInType.kind != "extension" %}
    {% set method_sel %}{% if method|annotated:"mirageSel" %}sel_{{ method.annotations.mirageSel }}{% else %}sel_{{ method.callName }}{% endif %}{% endset %}
    let {{ method_sel }} = "{{ method_sel }}"
    {% call print_override method %}func {{ method.name|replace:"  ","" }}{% if not method.returnTypeName.isVoid %} -> {{ method.returnTypeName }}{% endif %} {
        {% if method.actualReturnTypeName.isVoid %}
        mockManager.handle({{ method_sel }}, withDefaultReturnValue: nil, withArgs:{% call params_values method %})
        {% else %}
        return mockManager.handle({{ method_sel }}, withDefaultReturnValue: {% call any_call method.actualReturnTypeName %}, withArgs:{% call params_values method %}) as{%if method.actualReturnTypeName.isOptional%}?{%else%}!{%endif%} {{ method.actualReturnTypeName|replace:"?","" }}
        {% endif %}
    }
    {% endif %}
    {% endif %}
    {% endfor %}    
}
// sourcery:end
{% endmacro %}

{% block generator %}

{% for type in types.classes|annotated:"mirageMock" %}
{% call generate type %}
{% endfor %}

{% for type in types.protocols|annotated:"mirageMock" %}
{% call generate type %}
{% endfor %}

{% endblock %}