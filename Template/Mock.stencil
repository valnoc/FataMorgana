
{# === IMPORTS === #}
{% macro generateImports %}
import Foundation
import Mirage

@testable import {{ argument.testableModule }}
{{ argument.imports }}
{% endmacro %}

{# === ANY === #}
{% macro callAnyOther type %}any{{ type|replace:"?","" }}(){% endmacro %}

{% macro callAnyArray type %}{#
    #}{% if argument.returnEmptyArray %}{#
        #}[]{#
    #}{% else %}{#
        #}any{{ type|replace:"?",""|replace:"[",""|replace:"]","" }}Array(){#
    #}{% endif %}{#
#}{% endmacro %}

{% macro callAnyDict type %}{#
    #}{% if argument.returnEmptyDict %}{#
        #}[:]{#
    #}{% else %}{#
        #}any{{ type|replace:"?",""|replace:"[",""|replace:"]",""|replace:":",""|replace:" ","" }}Dict(){#
    #}{% endif %}{#
#}{% endmacro %}

{% macro callAny type %}{#
    #}{% if type|contains:":" %}{#
        #}{% call callAnyDict type %}{#
    #}{% else %}{#
        #}{% if type|contains:"[" %}{#
            #}{% call callAnyArray type %}{#
        #}{% else %}{#
            #}{% call callAnyOther type %}{#
        #}{% endif %}{#
    #}{% endif %}{#
#}{% endmacro %}

{# === METHOD === #}
{# declaration #}
{% macro getMethodSel method %}{% if method|annotated:"mirageSel" %}sel_{{ method.annotations.mirageSel }}{% else %}sel_{{ method.callName }}{% endif %}{% endmacro %}

{% macro printOverride method %}{% if method.definedInType.kind == "class" %}override {% endif %}{% endmacro %}
{% macro printMethodName method %}{{ method.name|replace:"  ","" }}{% endmacro %}
{% macro printMethodReturnType method %}{% if not method.returnTypeName.isVoid %} -> {{ method.returnTypeName }}{% endif %}{% endmacro %}

{% macro printMethodDeclaration method %}{#
    #}{% call printOverride method %}func {% call printMethodName method %}{% if method.throws %} throws {% endif %}{% call printMethodReturnType method %}{#
#}{% endmacro %}

{# args #}
{% macro printMethodArgs method %}{#
    #}{% if method.parameters.count > 0 %}{#
        #}{% for param in method.parameters %}{#
            #} {{ param.name }}{#
            #}{% if not forloop.last %},{% endif %}{#
        #}{% endfor %}{#
    #}{% else %}{#
        #} nil{#
    #}{% endif %}{#
#}{% endmacro %}

{# handler #}
{% macro printMockManagerHandle method methodSel %}{#
    #}mockManager.handle({{ methodSel }}, withDefaultReturnValue: {#
    #}{% if method.returnTypeName.isVoid %}nil{#
    #}{% else %}{% call callAny method.returnTypeName %}{#
    #}{% endif %}{#   
    #}, withArgs:{% call printMethodArgs method %}){#
#}{% endmacro %}

{# mock #}
{% macro generateMockMethod method %}
    {% set methodSel %}{% call getMethodSel method %}{% endset %}
    {##}
    let {{ methodSel }} = "{{ methodSel }}"
    {% call printMethodDeclaration method %} {
        {% if method.returnTypeName.isVoid %}
        {% call printMockManagerHandle method methodSel %}
        {% else %}
        return {% call printMockManagerHandle method methodSel %} as{%if method.returnTypeName.isOptional%}?{%else%}!{%endif%} {{ method.returnTypeName|replace:"?","" }}
        {% endif %}
    }
{% endmacro %}

{# === VAR === #}
{% macro getVarSelGet var %}{% if var|annotated:"mirageSel" %}sel_get_{{ var.annotations.mirageSel }}{% else %}sel_get_{{ var.name }}{% endif %}{% endmacro %}
{% macro getVarSelSet var %}{% if var|annotated:"mirageSel" %}sel_set_{{ var.annotations.mirageSel }}{% else %}sel_set_{{ var.name }}{% endif %}{% endmacro %}

{# handler #}
{% macro printMockVarManagerHandle var varSel %}{#
    #}mockManager.handle({{ varSel }}{#
    #}, withDefaultReturnValue: {#
    #}{% if method.returnTypeName.isVoid %}nil{#
    #}{% else %}{% call callAny method.returnTypeName %}{#
    #}{% endif %}{#   
    #}, withArgs:nil){#
#}{% endmacro %}

{# mock #}
{% macro generateMockVar var %}
    {% set varSelGet %}{% call getVarSelGet var %}{% endset %}
    {% set varSelSet %}{% call getVarSelSet var %}{% endset %}
    {##}
    let {{ varSelGet }} = "{{ varSelGet }}"
    let {{ varSelSet }} = "{{ varSelSet }}"
    var {{ var.name}}: {{ var.typeName }} {
        get { return mockManager.handle({{ varSelGet }}, withDefaultReturnValue: {% call callAny var.typeName %}, withArgs:nil) as{%if var.isOptional%}?{%else%}!{%endif%} {{ var.typeName|replace:"?","" }}  }
    {% if var.writeAccess != "" and var.writeAccess != "fileprivate" %}
        set(value) { mockManager.handle({{ varSelSet }}, withDefaultReturnValue: nil, withArgs:value) }
    {% endif %}
    }
{% endmacro %}

{# === TYPE === #}
{% macro printCallRealMethodArgs method %}{#
    #}{% for param in method.parameters %}{#
        #}{{ param.argumentLabel }}{#
        #}{% if param.argumentLabel.length > 0 %}:{% endif %}{#
        #} args![{{forloop.counter0}}]{#
        #} as{% if param.isOptional %}?{% else %}!{% endif %}{#
        #} {{ param.typeName.unwrappedTypeName }}{#
        #}{% if not forloop.last %}, {% endif %}{#
    #}{% endfor %}{#
#}{% endmacro %}

{% macro printCallRealMethod method %}{#
    #}{{ method.callName }}({% call printCallRealMethodArgs method %}){#
#}{% endmacro %}

{% macro generateMockProtocol type %}
class Mock{{ type.name }}: {{ type.name }}, Mock {
    
    lazy var mockManager: MockManager = MockManager(self, callRealFuncClosure: { [weak self] (funcName, args) -> Any? in
        guard let __self = self else { return nil }
        return nil
    })
    
    //MARK: - Mock{{ type.name }}
    {% for var in type.allVariables|!definedInExtension|!annotated:"mirageSkip" %}
            {% call generateMockVar var %}

    {% endfor %}

    {% for method in type.allMethods|!definedInExtension|!annotated:"mirageSkip" %}
        {% if not method.isInitializer and not method.isDeinitializer and not method.accessLevel == "fileprivate" %}
            {% call generateMockMethod method %}

        {% endif %}
    {% endfor %}    
}
{% endmacro %}

{% macro generateMockClass type %}
class Mock{{ type.name }}: {{ type.name }}, Mock {
    
    lazy var mockManager: MockManager = MockManager(self, callRealFuncClosure: { [weak self] (funcName, args) -> Any? in
        guard let __self = self else { return nil }
        return __self.callRealFunc(funcName, args)
    })
    fileprivate func callRealFunc(_ funcName:String, _ args:[Any?]?) -> Any? {
        switch funcName {
        {% for method in type.allMethods|!definedInExtension|!annotated:"mirageSkip" %}
            {% if not method.isInitializer and not method.isDeinitializer and not method.accessLevel == "fileprivate" %}
                {% set methodSel %}{% call getMethodSel method %}{% endset %}
        case {{ methodSel }}:
            return {% if method.throws %}try? {% endif %}super.{% call printCallRealMethod method %}
            {% endif %}
        {% endfor %}
        default:
            return nil
        }
    }
    
    //MARK: - Mock{{ type.name }}
    {% for method in type.allMethods|!definedInExtension|!annotated:"mirageSkip" %}
        {% if not method.isInitializer and not method.isDeinitializer and not method.accessLevel == "fileprivate" %}
            {% call generateMockMethod method %}

        {% endif %}
    {% endfor %}    
}
{% endmacro %}

{% macro generateMockType type %}
{% if type.kind == "class" %}
    {% call generateMockClass type %}
{% else %}
    {% call generateMockProtocol type %}
{% endif %}
{% endmacro %}

{# === GENERATE MOCKS === #}
{% for type in types.classes|annotated:"mirageMock" %}
// sourcery:file:Mock{{ type.name }}
{% call generateImports %}

{% call generateMockType type %}
// sourcery:end
{% endfor %}

{% for type in types.protocols|annotated:"mirageMock" %}
// sourcery:file:Mock{{ type.name }}
{% call generateImports %}

{% call generateMockType type %}
// sourcery:end
{% endfor %}

{% for type in types.classes|annotated:"miragePartial" %}

// sourcery:file:Mock{{ type.name }}
{% call generateImports %}

class PartialMock{{ type.name }}: Mock{{ type.name }}, PartialMock { }

{% call generateMockType type %}
// sourcery:end

{% endfor %}
