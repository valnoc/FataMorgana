{# === IMPORTS === #}
{% macro generateImports %}
import Foundation
import Mirage
@testable import {{ argument.testableModule }}
{{ argument.imports }}
{% endmacro %}

{# === ANY === #}
{% macro callAny type %}{#
    #}{% if type|contains:":" %}{#
        #}{% call callAnyDict type %}{#
    #}{% else %}{#
        #}{% if type|contains:"[" %}{#
            #}{% call callAnyArray type %}{#
        #}{% else %}{#
            #}{% call callAnyType type %}{#
        #}{% endif %}{#
    #}{% endif %}{#
#}{% endmacro %}

{% macro callAnyDict type %}{#
    #}any{{ type|replace:"?",""|replace:"<",""|replace:">",""|replace:".",""|replace:"[",""|replace:"]",""|replace:":","" }}Dict(){#
#}{% endmacro %}

{% macro callAnyArray type %}{#
    #}any{{ type|replace:"?",""|replace:"<",""|replace:">",""|replace:".",""|replace:"[",""|replace:"]","" }}Array(){#
#}{% endmacro %}

{% macro callAnyType type %}{#
    #}any{{ type|replace:"?",""|replace:"<",""|replace:">",""|replace:".","" }}(){#
#}{% endmacro %}

{# === FUNC === #}
{## FUNC DECLARATION ##}
{% macro getFuncSel func %}{#
    #}{% if func|annotated:"mirageSel" %}{{ func.annotations.mirageSel }}{#
    #}{% else %}{{ func.callName }}{% endif %}{#
#}{% endmacro %}

{% macro printFuncDeclaration func %}{#
    #}{% call printFuncOverride func %}func {% call printFuncName func %}{% call printFuncThrows func %}{% call printFuncReturnType func %}{#
#}{% endmacro %}

{% macro printFuncOverride func %}{% if func.definedInType.kind == "class" %}override {% endif %}{% endmacro %}
{% macro printFuncName func %}{{ func.name|replace:" ","" }}{% endmacro %}
{% macro printFuncReturnType func %}{% if not func.returnTypeName.isVoid %} -> {{ func.returnTypeName }}{% endif %}{% endmacro %}
{% macro printFuncThrows func %}{% if func.throws %} throws {% endif %}{% endmacro %}

{## FUNC ARGS ##}
{% macro printFuncArgs func %}{#
    #}{% if func.parameters.count > 0 %}{#
        #}{% for param in func.parameters %}{#
            #} {{ param.name }}{#
            #}{% if not forloop.last %},{% endif %}{#
        #}{% endfor %}{#
    #}{% else %}{#
        #} nil{#
    #}{% endif %}{#
#}{% endmacro %}

{## FUNC MOCK ##}
{% macro generateMockFunc func %}
    {% set funcSel %}{% call getFuncSel func %}{% endset %}
    {% call printFuncDeclaration func %} {
        return mock_{{ funcSel }}.handle({% call printFuncArgs func %})
    }
{% endmacro %}

{# === GENERATE MOCKS === #}
{% macro generateMockProtocol type %}
class Mock{{ type.name }}: {{ type.name }} {
    //MARK: - Mock{{ type.name }}
    {% for func in type.allMethods|!definedInExtension|!annotated:"mirageSkip" %}
        {% if not func.isInitializer and not func.isDeinitializer and not func.accessLevel == "fileprivate" %}
            {% call generateMockFunc func %}
        {% endif %}
    {% endfor %}    
}
{% endmacro %}

{% macro generateMockType type %}
{% if type.kind == "class" %}
    {#{% call generateMockClass type %}#}
{% else %}
    {% call generateMockProtocol type %}
{% endif %}
{% endmacro %}

{# === SCRIPT === #}
{% for type in types.protocols|annotated:"mirageMock" %}
// sourcery:file:Mock{{ type.name }}
{% call generateImports %}

{% call generateMockType type %}
// sourcery:end
{% endfor %}
