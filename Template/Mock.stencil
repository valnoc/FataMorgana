{# === IMPORTS === #}
{% macro generateImports %}
import Mirage {#
#}{% for item in argument.imports %}
{#  #}{% if item.framework.count > 0 %}{#
        #}{% if item.testable == true %}@testable {% endif %}{#
        #}import {{ item.framework }}{#
    #}{% else %}{#
        #}import {{ item }}{#
    #}{% endif %}{#
#}{% endfor %}
{% endmacro %}

{% macro printType type %}
    {{ type }}
    {% for key in type %}
        {{key}} = {{type[key]}}
    {% endfor %}
{% endmacro %}

{# === ANY === #}
{% macro callAnyForType type %}{#
    #}any{% call getAnyNameForType type %}(){#
#}{% endmacro %}

{% macro getAnyNameForType type %}{#
    {% call printType type %}
    #}{% if type.dictionary %}{#
        #}{% call getAnyDictName type %}{#
    #}{% elif type.array %}{#
        #}{% call getAnyArrayName type %}{#
    #}{% elif type.tuple %}{#
        #}{% call getAnyTupleName type %}{#
    #}{% elif type.isGeneric and type|contains:"<" %}{#
        #}{% call getAnyGenericName type %}{#
    #}{% elif type.closure %}{#
        #}{% call getAnyClosureName type %}{#        
    #}{% else %}{#
        #}{% call getAnyTypeName type %}{#
    #}{% endif %}{#
#}{% endmacro %}

{% macro getAnyClosureName type %}{#
    #}Closure{#
    #}{% if type.isOptional %}Opt{% endif %}{#
    #}{% if type.closure.parameters.count > 0 %}{#
    #}Getting{#
    #}{% for argtype in type.closure.parameters %}{#
        #}{% call getAnyNameForType argtype.typeName %}{#
    #}{% endfor %}{#
    #}{% else %}GettingVoid{#
    #}{% endif %}{#    
    #}Returning{% call getAnyNameForType type.closure.returnTypeName %}{#
#}{% endmacro %}

{% macro getAnyGenericName type %}{#
    #}{{ type.generic.name }}Of{#
    #}{% call getAnyNameForType type.generic.typeParameters.first.typeName %}{#
#}{% endmacro %}

{% macro getAnyTupleName type %}{#
    #}Tuple{% if type.isOptional %}Opt{% endif %}Of{#
    #}{% for subtype in type.tuple.elements %}{#
        #}{% call getAnyNameForType subtype.typeName %}{#
        #}{% if not forloop.last %}And{% endif %}{#
    #}{% endfor %}{#
#}{% endmacro %}

{% macro getAnyDictName type %}{#
    #}Dict{% if type.isOptional %}Opt{% endif %}Of{#
    #}{% call getAnyNameForType type.dictionary.keyTypeName %}To{% call getAnyNameForType type.dictionary.valueTypeName %}{#
#}{% endmacro %}

{% macro getAnyArrayName type %}{#
    #}Array{% if type.isOptional %}Opt{% endif %}Of{#
    #}{% call getAnyNameForType type.array.elementTypeName %}{#
#}{% endmacro %}

{% macro getAnyTypeName type %}{#
    #}{{ type|replace:"?","Opt"|replace:"<",""|replace:">",""|replace:".","" }}{#
#}{% endmacro %}

{# === VAR + FUNC === #}
{% macro printOverride func %}{% if func.definedInType.kind == "class" %}override {% endif %}{% endmacro %}

{# === VAR === #}
{## VAR MOCK ##}
{% macro getVarSel var %}{#
    #}{% if var|annotated:"mirageSel" %}{{ var.annotations.mirageSel }}{#
    #}{% else %}{{ var.name }}{% endif %}{#
#}{% endmacro %}

{% macro generateVarMock var %}
    {% set varSel %}{% call getVarSel var %}{% endset %}
    //MARK: {{ varSel }}
    lazy var mock_{{ varSel }}_get = FuncCallHandler<Void, ({{ var.typeName }})>(returnValue: {#
    #}{% if var.typeName.isVoid %}(){#
    #}{% elif var.typeName.isOptional and argument.returnOptionalAsNil %}nil{#
    #}{% elif var|annotated:"mirageReturn" %}{{ var.annotations.mirageReturn }}{#
    #}{% else %}{% call callAnyForType var.typeName %}{#
    #}{% endif %}{#
    #})
    {##}
    {% if var.writeAccess != "" and var.writeAccess != "fileprivate" %}{#
        #}lazy var mock_{{ varSel }}_set = FuncCallHandler<{{ var.typeName }}, Void>(returnValue: ()){#
    #}{% endif %}
    {##}
    {% call printOverride var %}var {{ var.name}}: {{ var.typeName }} {
        get { return mock_{{ varSel }}_get.handle(()) }
    {% if var.writeAccess != "" and var.writeAccess != "fileprivate" %}
        set(value) { mock_{{ varSel }}_set.handle(value) }
    {% endif %}
    }

{% endmacro %}

{# === FUNC === #}
{## FUNC DECLARATION ##}
{% macro printFuncDeclaration func %}{#
    #}{% call printOverride func %}func {{ func.name }}{% call printFuncThrows func %}{% call printFuncReturnType func %}{#
#}{% endmacro %}

{% macro printFuncReturnType func %}{% if not func.returnTypeName.isVoid %} -> {{ func.returnTypeName }}{% endif %}{% endmacro %}
{% macro printFuncThrows func %}{% if func.throws %} throws {% endif %}{% endmacro %}

{## FUNC ARGS ##}
{% macro printFuncArgs func %}{#
    #}{% if func.parameters.count > 0 %}{#
        #}{% for param in func.parameters %}{#
            #} {{ param.name }}{#
            #}{% if not forloop.last %},{% endif %}{#
        #}{% endfor %}{#
    #}{% else %}{#
        #} nil{#
    #}{% endif %}{#
#}{% endmacro %}

{## FUNC MOCK ##}
{% macro getFuncSel func %}{#
    #}{% if func|annotated:"mirageSel" %}{{ func.annotations.mirageSel }}{#
    #}{% else %}{{ func.callName }}{% endif %}{#
#}{% endmacro %}

{% macro generateFuncMock func isClass isPartial %}
    {% set funcSel %}{% call getFuncSel func %}{% endset %}
    //MARK: {{ funcSel }}
    {% if func.parameters.count > 1 %}
        {% call generateFuncMockWithManyArgs func isClass isPartial %}
    {% elif func.parameters.count > 0 %}
        {% call generateFuncMockWithOneArg func isClass isPartial %}
    {% else %}
        {% call generateFuncMockWithZeroArgs func isClass isPartial %}
    {% endif %}
{% endmacro %}

{% macro generateFuncMockWithManyArgs func isClass isPartial %}
    {% set funcArgsClass %}{{ funcSel|upperFirstLetter }}Args{% endset %}
    class {{ funcArgsClass }} {
        {% for param in func.parameters %}{#
            #}var {{ param.name }}: {{ param.typeName }}
        {#
        #}{% endfor %}
        
        init({#
        #}{% for param in func.parameters %}{#
            #}_ {{ param.name }}: {{ param.typeName }}{#
            #}{% if not forloop.last %}, {% endif %}{#
        #}{% endfor %}{#
        #}) {
            {% for param in func.parameters %}{#
                #}self.{{ param.name }} = {{ param.name }}
            {#
            #}{% endfor %}
        }
    }
    {% set handleValue %}{#
    #}{{ funcArgsClass }}({#
            #}{% for param in func.parameters %}{#
                #}{{ param.name }}{#
                #}{% if not forloop.last %}, {% endif %}{#
            #}{% endfor %}{#
    #}){% endset %}
    {% call generateFuncMockWithArgTypeAndHandleValue func funcArgsClass handleValue isClass isPartial %}
{% endmacro %}

{% macro generateFuncMockWithOneArg func isClass isPartial %}
    {% call generateFuncMockWithArgTypeAndHandleValue func func.parameters.first.typeName func.parameters.first.name isClass isPartial %}
{% endmacro %}

{% macro generateFuncMockWithZeroArgs func isClass isPartial %}
    {% call generateFuncMockWithArgTypeAndHandleValue func "Void" "()" isClass isPartial %}
{% endmacro %}

{% macro generateFuncMockWithArgTypeAndHandleValue func argType handleValue isClass isPartial %}
    lazy var mock_{{ funcSel }} = FuncCallHandler<{{ argType|replace:"@escaping ","" }}, {{ func.returnTypeName }}>(returnValue: {#
    #}{% if func.returnTypeName.isVoid %}(){#
    #}{% elif func.returnTypeName.isOptional and argument.returnOptionalAsNil %}nil{#
    #}{% elif func|annotated:"mirageReturn" %}{{ func.annotations.mirageReturn }}{#
    #}{% else %}{% call callAnyForType func.returnTypeName %}{#
    #}{% endif %}{#
    #}{#
    #}{% if isPartial %}{#
    #}, isPartial: true{#
    #}{% endif %}{#
    #}{#
    #}{% if isClass %}{#
    #}, callRealFunc: { [weak self] (args) -> Void in
        guard let __self = self else { return () }
        return __self.super_{{ funcSel }}(args)
    }{#
    #}{% endif %}{#
    #})    
    {% if isClass %}
    func super_{{ funcSel }}(_ args: {{ argType }}) -> {{ func.returnTypeName }} {
        return super.{{ func.callName }}({#
        #}{% for param in func.parameters %}{#
            #}{{ param.argumentLabel }}{#
            #}{% if param.argumentLabel.count > 0 %}: {% endif %}{#
            #}{% if func.parameters.count == 1 %}{#
            #}args{#
            #}{% else %}{#
            #}args.{{ param.name }}{#
            #}{% endif %}{#
            #}{% if not forloop.last %}, {% endif %}{#
        #}{% endfor %}{#
        #})
    }
    {% endif %}
    {% call printFuncDeclaration func %} {
        return mock_{{ funcSel }}.handle({{ handleValue }})
    }
{% endmacro %}

{# === GENERATE MOCKS === #}
{% macro generateMockProtocol type %}
class Mock{{ type.name }}: {{ type.name }} {
    //MARK: - VARIABLES
    {% for var in type.allVariables|!definedInExtension|!annotated:"mirageSkip" %}
        {% call generateVarMock var %}
    {% endfor %}
    {##}
    //MARK: - FUNCTIONS
    {% for func in type.allMethods|!definedInExtension|!annotated:"mirageSkip" %}
        {% if not func.isInitializer and not func.isDeinitializer and not func.accessLevel == "fileprivate" %}
            {% call generateFuncMock func false false %}
        {% endif %}
    {% endfor %}    
}
{% endmacro %}

{% macro generateMockClass type isPartial %}
class Mock{{ type.name }}: {{ type.name }} {
    //MARK: - VARIABLES
    {% for var in type.variables|!definedInExtension|!annotated:"mirageSkip" %}
        {% call generateVarMock var %}
    {% endfor %}
    {##}
    //MARK: - FUNCTIONS
    {% for func in type.methods|!definedInExtension|!annotated:"mirageSkip" %}
        {% if not func.isInitializer and not func.isDeinitializer and not func.accessLevel == "fileprivate" %}
            {% call generateFuncMock func true isPartial %}
        {% endif %}
    {% endfor %}    
}
{% endmacro %}

{% macro generateMockType type isPartial %}
{% if type.kind == "protocol" %}
    {% call generateMockProtocol type %}
{% else %}
    {% call generateMockClass type isPartial %}
{% endif %}
{% endmacro %}

{# === SCRIPT === #}
{% for type in types.protocols|annotated:"mirageMock" %}
// sourcery:file:Mock{{ type.name }}
{% call generateImports %}

{% call generateMockType type false %}
// sourcery:end
{% endfor %}

{##}

{% for type in types.classes|annotated:"mirageMock" %}
// sourcery:file:Mock{{ type.name }}
{% call generateImports %}

{% call generateMockType type false %}
// sourcery:end
{% endfor %}

{##}

{% for type in types.classes|annotated:"miragePartialMock" %}
// sourcery:file:Mock{{ type.name }}
{% call generateImports %}

{% call generateMockType type true %}
// sourcery:end
{% endfor %}