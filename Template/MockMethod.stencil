
{% extends "MockAny.stencil" %}

{# declaration #}
{% macro getMethodSel method %}{% if method|annotated:"mirageSel" %}sel_{{ method.annotations.mirageSel }}{% else %}sel_{{ method.callName }}{% endif %}{% endmacro %}

{% macro printOverride method %}{% if method.definedInType.kind == "class" %}override {% endif %}{% endmacro %}
{% macro printMethodName method %}{{ method.name|replace:"  ","" }}{% endmacro %}
{% macro printMethodReturnType method %}{% if not method.returnTypeName.isVoid %} -> {{ method.returnTypeName }}{% endif %}{% endmacro %}

{% macro printMethodDeclaration method %}{#
    #}{% call printOverride method %}func {% call printMethodName method %}{% if method.throws %} throws {% endif %}{% call printMethodReturnType method %}{#
#}{% endmacro %}

{# args #}
{% macro printMethodArgs method %}{#
    #}{% if method.parameters.count > 0 %}{#
        #}{% for param in method.parameters %}{#
            #} {{ param.name }}{#
            #}{% if not forloop.last %},{% endif %}{#
        #}{% endfor %}{#
    #}{% else %}{#
        #} nil{#
    #}{% endif %}{#
#}{% endmacro %}

{# handler #}
{% macro printMockManagerHandle method methodSel %}{#
    #}mockManager.handle({{ methodSel }}, withDefaultReturnValue: {#
    #}{% if method.actualReturnTypeName.isVoid %}nil{#
    #}{% else %}{% call callAny method.actualReturnTypeName %}{#
    #}{% endif %}{#   
    #}, withArgs:{% call printMethodArgs method %}){#
#}{% endmacro %}

{# mock #}
{% macro generateMockMethod method %}
    {% set methodSel %}{% call getMethodSel method %}{% endset %}
    {##}
    let {{ methodSel }} = "{{ methodSel }}"
    {% call printMethodDeclaration method %} {
        {% if method.actualReturnTypeName.isVoid %}
        {% call printMockManagerHandle method methodSel %}
        {% else %}
        return {% call printMockManagerHandle method methodSel %} as{%if method.actualReturnTypeName.isOptional%}?{%else%}!{%endif%} {{ method.actualReturnTypeName|replace:"?","" }}
        {% endif %}
    }
{% endmacro %}
